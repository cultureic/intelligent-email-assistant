import React, { useState, useEffect } from 'react';\nimport {\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  Box,\n  Button,\n  Alert,\n  Chip,\n  CircularProgress,\n} from '@mui/material';\nimport {\n  Email,\n  Warning,\n  AutoAwesome,\n  Schedule,\n  Refresh,\n} from '@mui/icons-material';\nimport { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip, Legend } from 'recharts';\nimport { emailApi } from '../services/api';\nimport { EmailStats, AutoResponseStats, ProcessingStats, EmailEntity } from '../types';\n\nconst Dashboard: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [emailStats, setEmailStats] = useState<EmailStats | null>(null);\n  const [autoResponseStats, setAutoResponseStats] = useState<AutoResponseStats | null>(null);\n  const [processingStats, setProcessingStats] = useState<ProcessingStats | null>(null);\n  const [recentEmails, setRecentEmails] = useState<EmailEntity[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const [emailStatsData, autoStatsData, processStatsData, recentEmailsData] = await Promise.all([\n        emailApi.getEmailStats(),\n        emailApi.getAutoResponseStats(),\n        emailApi.getProcessingStats(),\n        emailApi.getRecentEmails(24),\n      ]);\n\n      setEmailStats(emailStatsData);\n      setAutoResponseStats(autoStatsData);\n      setProcessingStats(processStatsData);\n      setRecentEmails(recentEmailsData);\n    } catch (err) {\n      setError('Failed to load dashboard data. The backend may not be running.');\n      console.error('Dashboard data loading error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const triggerProcessing = async () => {\n    try {\n      await emailApi.triggerProcessing();\n      // Refresh dashboard after triggering\n      setTimeout(loadDashboardData, 2000);\n    } catch (err) {\n      setError('Failed to trigger email processing');\n    }\n  };\n\n  const triggerAutoResponses = async () => {\n    try {\n      await emailApi.triggerAutoResponses();\n      // Refresh dashboard after triggering\n      setTimeout(loadDashboardData, 2000);\n    } catch (err) {\n      setError('Failed to trigger auto-responses');\n    }\n  };\n\n  useEffect(() => {\n    loadDashboardData();\n    // Refresh every 5 minutes\n    const interval = setInterval(loadDashboardData, 5 * 60 * 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight={400}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Prepare chart data\n  const emailDistributionData = emailStats ? [\n    { name: 'Requires Attention', value: emailStats.requiringAttention, color: '#ff6b6b' },\n    { name: 'Auto-Responded', value: emailStats.autoResponded, color: '#4ecdc4' },\n    { name: 'Pending', value: emailStats.pendingProcessing, color: '#45b7d1' },\n  ] : [];\n\n  const processingData = [\n    { name: 'Processed', value: emailStats?.totalProcessed || 0 },\n    { name: 'Auto-Responded', value: autoResponseStats?.totalAutoResponded || 0 },\n    { name: 'Pending Auto-Response', value: autoResponseStats?.pendingAutoResponse || 0 },\n  ];\n\n  return (\n    <Box>\n      <Typography variant=\"h4\" gutterBottom>\n        Email Assistant Dashboard\n      </Typography>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      <Box sx={{ mb: 2 }}>\n        <Button\n          variant=\"contained\"\n          startIcon={<Refresh />}\n          onClick={loadDashboardData}\n          sx={{ mr: 2 }}\n        >\n          Refresh\n        </Button>\n        <Button\n          variant=\"outlined\"\n          startIcon={<Email />}\n          onClick={triggerProcessing}\n          sx={{ mr: 2 }}\n        >\n          Process Emails\n        </Button>\n        <Button\n          variant=\"outlined\"\n          startIcon={<AutoAwesome />}\n          onClick={triggerAutoResponses}\n        >\n          Generate Responses\n        </Button>\n      </Box>\n\n      <Grid container spacing={3}>\n        {/* Statistics Cards */}\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Email color=\"primary\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Processed\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {emailStats?.totalProcessed || 0}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Warning color=\"warning\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Requires Attention\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {emailStats?.requiringAttention || 0}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <AutoAwesome color=\"success\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Auto-Responded\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {emailStats?.autoResponded || 0}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Schedule color=\"info\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Pending\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {emailStats?.pendingProcessing || 0}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Email Distribution Chart */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Email Distribution\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={emailDistributionData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                    label={({ name, value }) => `${name}: ${value}`}\n                  >\n                    {emailDistributionData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Processing Statistics Chart */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Processing Statistics\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={processingData}>\n                  <XAxis dataKey=\"name\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Legend />\n                  <Bar dataKey=\"value\" fill=\"#8884d8\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Recent Emails */}\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Recent Emails (Last 24 Hours)\n              </Typography>\n              {recentEmails.length === 0 ? (\n                <Typography color=\"textSecondary\">\n                  No recent emails found\n                </Typography>\n              ) : (\n                <Box>\n                  {recentEmails.slice(0, 5).map((email) => (\n                    <Box\n                      key={email.id}\n                      sx={{\n                        p: 2,\n                        mb: 1,\n                        border: 1,\n                        borderColor: 'grey.300',\n                        borderRadius: 1,\n                      }}\n                    >\n                      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                        <Box>\n                          <Typography variant=\"subtitle1\" noWrap>\n                            {email.subject || 'No Subject'}\n                          </Typography>\n                          <Typography variant=\"body2\" color=\"textSecondary\">\n                            From: {email.senderName} ({email.senderEmail})\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"textSecondary\">\n                            {new Date(email.receivedTime).toLocaleString()}\n                          </Typography>\n                        </Box>\n                        <Box>\n                          <Chip\n                            label={email.requiresAttention ? 'Attention Required' : 'Auto-Handled'}\n                            color={email.requiresAttention ? 'warning' : 'success'}\n                            size=\"small\"\n                            sx={{ mr: 1 }}\n                          />\n                          {email.category && (\n                            <Chip\n                              label={email.category}\n                              variant=\"outlined\"\n                              size=\"small\"\n                            />\n                          )}\n                        </Box>\n                      </Box>\n                    </Box>\n                  ))}\n                </Box>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* System Status */}\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                System Status\n              </Typography>\n              <Box display=\"flex\" gap={2} flexWrap=\"wrap\">\n                <Chip\n                  label=\"Email Processing\"\n                  color=\"success\"\n                  icon={<Email />}\n                />\n                <Chip\n                  label=\"LLM Analysis\"\n                  color=\"success\"\n                  icon={<AutoAwesome />}\n                />\n                <Chip\n                  label=\"WhatsApp Notifications\"\n                  color=\"success\"\n                  icon={<Warning />}\n                />\n                {processingStats && (\n                  <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 1 }}>\n                    Last check: {new Date(processingStats.lastCheckTime).toLocaleString()}\n                    | Batch size: {processingStats.batchSize}\n                    | Check interval: {processingStats.checkIntervalMinutes} minutes\n                  </Typography>\n                )}\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Dashboard;
