import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Card,\n  CardContent,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  Button,\n  Grid,\n  Chip,\n  Alert,\n  Divider,\n  Slider,\n} from '@mui/material';\nimport {\n  Save,\n  Settings as SettingsIcon,\n  SmartToy,\n  WhatsApp,\n} from '@mui/icons-material';\nimport { userApi } from '../services/api';\nimport { UserPreferences } from '../types';\n\nconst Settings: React.FC = () => {\n  const [preferences, setPreferences] = useState<UserPreferences>({\n    userId: 'demo-user-123',\n    responseStyle: 'professional',\n    keywordsRequiringAttention: [],\n    trustedSenders: [],\n    autoRespondSenders: [],\n    enableWhatsAppNotifications: true,\n    whatsAppNumber: '',\n    responseDelayMinutes: 5,\n    timezone: 'UTC',\n    workingHours: [],\n    defaultLlmProvider: 'openai',\n    confidenceThreshold: 0.7,\n  });\n  \n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [newKeyword, setNewKeyword] = useState('');\n  const [newTrustedSender, setNewTrustedSender] = useState('');\n  const [newAutoRespondSender, setNewAutoRespondSender] = useState('');\n\n  const loadPreferences = async () => {\n    try {\n      setLoading(true);\n      const prefs = await userApi.getUserPreferences();\n      setPreferences(prefs);\n    } catch (err) {\n      console.log('Using default preferences');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const savePreferences = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      setSuccess(null);\n      \n      await userApi.updateUserPreferences(preferences);\n      setSuccess('Settings saved successfully!');\n    } catch (err) {\n      setError('Failed to save settings');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addKeyword = () => {\n    if (newKeyword.trim() && !preferences.keywordsRequiringAttention.includes(newKeyword.trim().toLowerCase())) {\n      setPreferences({\n        ...preferences,\n        keywordsRequiringAttention: [...preferences.keywordsRequiringAttention, newKeyword.trim().toLowerCase()]\n      });\n      setNewKeyword('');\n    }\n  };\n\n  const removeKeyword = (keyword: string) => {\n    setPreferences({\n      ...preferences,\n      keywordsRequiringAttention: preferences.keywordsRequiringAttention.filter(k => k !== keyword)\n    });\n  };\n\n  const addTrustedSender = () => {\n    if (newTrustedSender.trim() && !preferences.trustedSenders.includes(newTrustedSender.trim().toLowerCase())) {\n      setPreferences({\n        ...preferences,\n        trustedSenders: [...preferences.trustedSenders, newTrustedSender.trim().toLowerCase()]\n      });\n      setNewTrustedSender('');\n    }\n  };\n\n  const removeTrustedSender = (sender: string) => {\n    setPreferences({\n      ...preferences,\n      trustedSenders: preferences.trustedSenders.filter(s => s !== sender)\n    });\n  };\n\n  const addAutoRespondSender = () => {\n    if (newAutoRespondSender.trim() && !preferences.autoRespondSenders.includes(newAutoRespondSender.trim().toLowerCase())) {\n      setPreferences({\n        ...preferences,\n        autoRespondSenders: [...preferences.autoRespondSenders, newAutoRespondSender.trim().toLowerCase()]\n      });\n      setNewAutoRespondSender('');\n    }\n  };\n\n  const removeAutoRespondSender = (sender: string) => {\n    setPreferences({\n      ...preferences,\n      autoRespondSenders: preferences.autoRespondSenders.filter(s => s !== sender)\n    });\n  };\n\n  useEffect(() => {\n    loadPreferences();\n  }, []);\n\n  return (\n    <Box>\n      <Typography variant=\"h4\" gutterBottom>\n        Settings & Preferences\n      </Typography>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      {success && (\n        <Alert severity=\"success\" sx={{ mb: 2 }}>\n          {success}\n        </Alert>\n      )}\n\n      <Grid container spacing={3}>\n        {/* General Settings */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                <SettingsIcon sx={{ mr: 1, verticalAlign: 'middle' }} />\n                General Settings\n              </Typography>\n              \n              <FormControl fullWidth sx={{ mb: 2 }}>\n                <InputLabel>Response Style</InputLabel>\n                <Select\n                  value={preferences.responseStyle}\n                  label=\"Response Style\"\n                  onChange={(e) => setPreferences({ ...preferences, responseStyle: e.target.value })}\n                >\n                  <MenuItem value=\"professional\">Professional</MenuItem>\n                  <MenuItem value=\"formal\">Formal</MenuItem>\n                  <MenuItem value=\"casual\">Casual</MenuItem>\n                  <MenuItem value=\"friendly\">Friendly</MenuItem>\n                </Select>\n              </FormControl>\n\n              <TextField\n                fullWidth\n                label=\"Timezone\"\n                value={preferences.timezone}\n                onChange={(e) => setPreferences({ ...preferences, timezone: e.target.value })}\n                sx={{ mb: 2 }}\n              />\n\n              <Typography gutterBottom>\n                Response Delay: {preferences.responseDelayMinutes} minutes\n              </Typography>\n              <Slider\n                value={preferences.responseDelayMinutes}\n                onChange={(_, value) => setPreferences({ ...preferences, responseDelayMinutes: value as number })}\n                min={1}\n                max={60}\n                marks={[\n                  { value: 1, label: '1m' },\n                  { value: 15, label: '15m' },\n                  { value: 30, label: '30m' },\n                  { value: 60, label: '1h' }\n                ]}\n                sx={{ mb: 2 }}\n              />\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* LLM Settings */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                <SmartToy sx={{ mr: 1, verticalAlign: 'middle' }} />\n                AI & LLM Settings\n              </Typography>\n              \n              <FormControl fullWidth sx={{ mb: 2 }}>\n                <InputLabel>Default LLM Provider</InputLabel>\n                <Select\n                  value={preferences.defaultLlmProvider}\n                  label=\"Default LLM Provider\"\n                  onChange={(e) => setPreferences({ ...preferences, defaultLlmProvider: e.target.value })}\n                >\n                  <MenuItem value=\"openai\">OpenAI GPT</MenuItem>\n                  <MenuItem value=\"deepseek\">DeepSeek</MenuItem>\n                </Select>\n              </FormControl>\n\n              <Typography gutterBottom>\n                Confidence Threshold: {(preferences.confidenceThreshold * 100).toFixed(0)}%\n              </Typography>\n              <Slider\n                value={preferences.confidenceThreshold}\n                onChange={(_, value) => setPreferences({ ...preferences, confidenceThreshold: value as number })}\n                min={0.1}\n                max={1.0}\n                step={0.1}\n                marks={[\n                  { value: 0.1, label: '10%' },\n                  { value: 0.5, label: '50%' },\n                  { value: 0.9, label: '90%' }\n                ]}\n                sx={{ mb: 2 }}\n              />\n              \n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Emails with confidence below this threshold will require your attention.\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* WhatsApp Settings */}\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                <WhatsApp sx={{ mr: 1, verticalAlign: 'middle' }} />\n                WhatsApp Notifications\n              </Typography>\n              \n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={preferences.enableWhatsAppNotifications}\n                    onChange={(e) => setPreferences({ ...preferences, enableWhatsAppNotifications: e.target.checked })}\n                  />\n                }\n                label=\"Enable WhatsApp Notifications\"\n                sx={{ mb: 2 }}\n              />\n\n              {preferences.enableWhatsAppNotifications && (\n                <TextField\n                  fullWidth\n                  label=\"WhatsApp Number (with country code)\"\n                  placeholder=\"+1234567890\"\n                  value={preferences.whatsAppNumber}\n                  onChange={(e) => setPreferences({ ...preferences, whatsAppNumber: e.target.value })}\n                  helperText=\"Include country code (e.g., +1 for US)\"\n                  sx={{ mb: 2 }}\n                />\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Keywords Requiring Attention */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Keywords Requiring Attention\n              </Typography>\n              \n              <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\n                <TextField\n                  size=\"small\"\n                  placeholder=\"Add keyword\"\n                  value={newKeyword}\n                  onChange={(e) => setNewKeyword(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && addKeyword()}\n                />\n                <Button variant=\"outlined\" onClick={addKeyword}>\n                  Add\n                </Button>\n              </Box>\n              \n              <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n                {preferences.keywordsRequiringAttention.map((keyword) => (\n                  <Chip\n                    key={keyword}\n                    label={keyword}\n                    onDelete={() => removeKeyword(keyword)}\n                    size=\"small\"\n                  />\n                ))}\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Trusted Senders */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Trusted Senders\n              </Typography>\n              \n              <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\n                <TextField\n                  size=\"small\"\n                  placeholder=\"Add email address\"\n                  value={newTrustedSender}\n                  onChange={(e) => setNewTrustedSender(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && addTrustedSender()}\n                />\n                <Button variant=\"outlined\" onClick={addTrustedSender}>\n                  Add\n                </Button>\n              </Box>\n              \n              <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n                {preferences.trustedSenders.map((sender) => (\n                  <Chip\n                    key={sender}\n                    label={sender}\n                    onDelete={() => removeTrustedSender(sender)}\n                    size=\"small\"\n                    color=\"success\"\n                  />\n                ))}\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Auto-respond Senders */}\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Auto-respond Senders\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\n                Emails from these senders will always get an automatic response\n              </Typography>\n              \n              <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\n                <TextField\n                  size=\"small\"\n                  placeholder=\"Add email address\"\n                  value={newAutoRespondSender}\n                  onChange={(e) => setNewAutoRespondSender(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && addAutoRespondSender()}\n                />\n                <Button variant=\"outlined\" onClick={addAutoRespondSender}>\n                  Add\n                </Button>\n              </Box>\n              \n              <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n                {preferences.autoRespondSenders.map((sender) => (\n                  <Chip\n                    key={sender}\n                    label={sender}\n                    onDelete={() => removeAutoRespondSender(sender)}\n                    size=\"small\"\n                    color=\"info\"\n                  />\n                ))}\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Save Button */}\n        <Grid item xs={12}>\n          <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n            <Button\n              variant=\"contained\"\n              size=\"large\"\n              startIcon={<Save />}\n              onClick={savePreferences}\n              disabled={loading}\n            >\n              {loading ? 'Saving...' : 'Save Settings'}\n            </Button>\n          </Box>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Settings;
