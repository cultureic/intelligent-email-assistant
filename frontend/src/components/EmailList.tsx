import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Card,\n  CardContent,\n  Chip,\n  Button,\n  Grid,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  CircularProgress,\n} from '@mui/material';\nimport {\n  Email,\n  Preview,\n  Send,\n  FilterList,\n} from '@mui/icons-material';\nimport { emailApi } from '../services/api';\nimport { EmailEntity } from '../types';\n\nconst EmailList: React.FC = () => {\n  const [emails, setEmails] = useState<EmailEntity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [filterCategory, setFilterCategory] = useState<string>('all');\n  const [filterSentiment, setFilterSentiment] = useState<string>('all');\n  const [selectedEmail, setSelectedEmail] = useState<EmailEntity | null>(null);\n  const [previewOpen, setPreviewOpen] = useState(false);\n  const [responsePreview, setResponsePreview] = useState<string>('');\n  const [previewLoading, setPreviewLoading] = useState(false);\n\n  const loadEmails = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      let emailsData: EmailEntity[];\n      \n      if (filterCategory !== 'all') {\n        emailsData = await emailApi.getEmailsByCategory(filterCategory);\n      } else if (filterSentiment !== 'all') {\n        emailsData = await emailApi.getEmailsBySentiment(filterSentiment);\n      } else {\n        emailsData = await emailApi.getUserEmails();\n      }\n      \n      setEmails(emailsData);\n    } catch (err) {\n      setError('Failed to load emails');\n      console.error('Email loading error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePreviewResponse = async (email: EmailEntity) => {\n    if (!email.requiresAttention) {\n      try {\n        setPreviewLoading(true);\n        setSelectedEmail(email);\n        const preview = await emailApi.previewResponse(email.emailId);\n        setResponsePreview(preview);\n        setPreviewOpen(true);\n      } catch (err) {\n        setError('Failed to generate response preview');\n      } finally {\n        setPreviewLoading(false);\n      }\n    }\n  };\n\n  const handleSendResponse = async () => {\n    if (selectedEmail) {\n      try {\n        await emailApi.sendAutoResponse(selectedEmail.emailId);\n        setPreviewOpen(false);\n        loadEmails(); // Refresh the list\n      } catch (err) {\n        setError('Failed to send response');\n      }\n    }\n  };\n\n  useEffect(() => {\n    loadEmails();\n  }, [filterCategory, filterSentiment]);\n\n  const getStatusColor = (email: EmailEntity) => {\n    if (email.requiresAttention) return 'error';\n    if (email.autoResponseSent) return 'success';\n    return 'warning';\n  };\n\n  const getStatusLabel = (email: EmailEntity) => {\n    if (email.requiresAttention) return 'Requires Attention';\n    if (email.autoResponseSent) return 'Auto-Responded';\n    return 'Pending Response';\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight={400}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h4\" gutterBottom>\n        Email Management\n      </Typography>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Filters */}\n      <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center' }}>\n        <FilterList />\n        <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n          <InputLabel>Category</InputLabel>\n          <Select\n            value={filterCategory}\n            label=\"Category\"\n            onChange={(e) => setFilterCategory(e.target.value)}\n          >\n            <MenuItem value=\"all\">All Categories</MenuItem>\n            <MenuItem value=\"business\">Business</MenuItem>\n            <MenuItem value=\"personal\">Personal</MenuItem>\n            <MenuItem value=\"newsletter\">Newsletter</MenuItem>\n            <MenuItem value=\"spam\">Spam</MenuItem>\n          </Select>\n        </FormControl>\n        \n        <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n          <InputLabel>Sentiment</InputLabel>\n          <Select\n            value={filterSentiment}\n            label=\"Sentiment\"\n            onChange={(e) => setFilterSentiment(e.target.value)}\n          >\n            <MenuItem value=\"all\">All Sentiments</MenuItem>\n            <MenuItem value=\"positive\">Positive</MenuItem>\n            <MenuItem value=\"negative\">Negative</MenuItem>\n            <MenuItem value=\"neutral\">Neutral</MenuItem>\n            <MenuItem value=\"urgent\">Urgent</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n\n      {/* Email List */}\n      <Grid container spacing={2}>\n        {emails.length === 0 ? (\n          <Grid item xs={12}>\n            <Typography color=\"textSecondary\" textAlign=\"center\" sx={{ mt: 4 }}>\n              No emails found\n            </Typography>\n          </Grid>\n        ) : (\n          emails.map((email) => (\n            <Grid item xs={12} key={email.id}>\n              <Card>\n                <CardContent>\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n                    <Box flex={1}>\n                      <Typography variant=\"h6\" gutterBottom>\n                        {email.subject || 'No Subject'}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                        From: {email.senderName} ({email.senderEmail})\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                        Received: {new Date(email.receivedTime).toLocaleString()}\n                      </Typography>\n                      {email.content && (\n                        <Typography \n                          variant=\"body2\" \n                          sx={{ \n                            mt: 1, \n                            maxHeight: 60, \n                            overflow: 'hidden', \n                            textOverflow: 'ellipsis' \n                          }}\n                        >\n                          {email.content.substring(0, 200)}...\n                        </Typography>\n                      )}\n                    </Box>\n                    \n                    <Box sx={{ ml: 2, display: 'flex', flexDirection: 'column', gap: 1 }}>\n                      <Chip\n                        label={getStatusLabel(email)}\n                        color={getStatusColor(email)}\n                        size=\"small\"\n                      />\n                      \n                      {email.category && (\n                        <Chip\n                          label={email.category}\n                          variant=\"outlined\"\n                          size=\"small\"\n                        />\n                      )}\n                      \n                      {email.sentiment && (\n                        <Chip\n                          label={email.sentiment}\n                          variant=\"outlined\"\n                          size=\"small\"\n                          color={email.sentiment === 'urgent' ? 'error' : 'default'}\n                        />\n                      )}\n                      \n                      <Box sx={{ display: 'flex', gap: 1, mt: 1 }}>\n                        {!email.requiresAttention && !email.autoResponseSent && (\n                          <>\n                            <Button\n                              size=\"small\"\n                              startIcon={<Preview />}\n                              onClick={() => handlePreviewResponse(email)}\n                              disabled={previewLoading}\n                            >\n                              Preview\n                            </Button>\n                          </>\n                        )}\n                        \n                        {email.confidenceScore && (\n                          <Typography variant=\"caption\" color=\"textSecondary\">\n                            Confidence: {(email.confidenceScore * 100).toFixed(1)}%\n                          </Typography>\n                        )}\n                      </Box>\n                    </Box>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))\n        )}\n      </Grid>\n\n      {/* Response Preview Dialog */}\n      <Dialog\n        open={previewOpen}\n        onClose={() => setPreviewOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          Response Preview: {selectedEmail?.subject}\n        </DialogTitle>\n        <DialogContent>\n          {selectedEmail && (\n            <Box sx={{ mb: 2 }}>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                To: {selectedEmail.senderName} ({selectedEmail.senderEmail})\n              </Typography>\n            </Box>\n          )}\n          <TextField\n            multiline\n            rows={8}\n            fullWidth\n            value={responsePreview}\n            variant=\"outlined\"\n            label=\"Generated Response\"\n            onChange={(e) => setResponsePreview(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setPreviewOpen(false)}>Cancel</Button>\n          <Button \n            onClick={handleSendResponse} \n            variant=\"contained\"\n            startIcon={<Send />}\n          >\n            Send Response\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default EmailList;
