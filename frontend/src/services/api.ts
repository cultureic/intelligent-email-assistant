import axios from 'axios';\nimport { EmailEntity, EmailStats, AutoResponseStats, ProcessingStats, UserPreferences } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// For demo purposes, using a hardcoded user ID\nconst DEMO_USER_ID = 'demo-user-123';\n\nexport const emailApi = {\n  // Get all emails for user\n  getUserEmails: (page = 0, size = 20): Promise<EmailEntity[]> => {\n    return api.get(`/emails/user/${DEMO_USER_ID}?page=${page}&size=${size}`)\n      .then(response => response.data);\n  },\n\n  // Get emails requiring attention\n  getEmailsRequiringAttention: (): Promise<EmailEntity[]> => {\n    return api.get(`/emails/user/${DEMO_USER_ID}/requiring-attention`)\n      .then(response => response.data);\n  },\n\n  // Get emails by category\n  getEmailsByCategory: (category: string): Promise<EmailEntity[]> => {\n    return api.get(`/emails/user/${DEMO_USER_ID}/category/${category}`)\n      .then(response => response.data);\n  },\n\n  // Get emails by sentiment\n  getEmailsBySentiment: (sentiment: string): Promise<EmailEntity[]> => {\n    return api.get(`/emails/user/${DEMO_USER_ID}/sentiment/${sentiment}`)\n      .then(response => response.data);\n  },\n\n  // Get specific email\n  getEmail: (emailId: string): Promise<EmailEntity> => {\n    return api.get(`/emails/${emailId}`)\n      .then(response => response.data);\n  },\n\n  // Get email statistics\n  getEmailStats: (): Promise<EmailStats> => {\n    return api.get(`/emails/user/${DEMO_USER_ID}/stats`)\n      .then(response => response.data);\n  },\n\n  // Get auto-response statistics\n  getAutoResponseStats: (): Promise<AutoResponseStats> => {\n    return api.get(`/emails/user/${DEMO_USER_ID}/auto-response-stats`)\n      .then(response => response.data);\n  },\n\n  // Get processing statistics\n  getProcessingStats: (): Promise<ProcessingStats> => {\n    return api.get('/emails/processing-stats')\n      .then(response => response.data);\n  },\n\n  // Get recent emails\n  getRecentEmails: (hours = 24): Promise<EmailEntity[]> => {\n    return api.get(`/emails/user/${DEMO_USER_ID}/recent?hours=${hours}`)\n      .then(response => response.data);\n  },\n\n  // Preview response for email\n  previewResponse: (emailId: string): Promise<string> => {\n    return api.post(`/emails/${emailId}/preview-response?userId=${DEMO_USER_ID}`)\n      .then(response => response.data);\n  },\n\n  // Send auto-response\n  sendAutoResponse: (emailId: string): Promise<boolean> => {\n    return api.post(`/emails/${emailId}/send-response?userId=${DEMO_USER_ID}`)\n      .then(response => response.data);\n  },\n\n  // Trigger manual processing\n  triggerProcessing: (): Promise<string> => {\n    return api.post('/emails/trigger-processing')\n      .then(response => response.data);\n  },\n\n  // Trigger auto-responses\n  triggerAutoResponses: (): Promise<string> => {\n    return api.post('/emails/trigger-auto-responses')\n      .then(response => response.data);\n  },\n};\n\n// LLM API endpoints\nexport const llmApi = {\n  // Get available providers\n  getProviders: (): Promise<string[]> => {\n    return api.get('/llm/providers')\n      .then(response => response.data);\n  },\n\n  // Get provider status\n  getProvidersStatus: (): Promise<Record<string, boolean>> => {\n    return api.get('/llm/status')\n      .then(response => response.data);\n  },\n};\n\n// User preferences API (placeholder - would need to implement backend endpoints)\nexport const userApi = {\n  // Get user preferences\n  getUserPreferences: (): Promise<UserPreferences> => {\n    return api.get(`/users/${DEMO_USER_ID}/preferences`)\n      .then(response => response.data)\n      .catch(() => {\n        // Return default preferences if not found\n        return {\n          userId: DEMO_USER_ID,\n          responseStyle: 'professional',\n          keywordsRequiringAttention: ['urgent', 'asap', 'important'],\n          trustedSenders: [],\n          autoRespondSenders: [],\n          enableWhatsAppNotifications: true,\n          whatsAppNumber: '',\n          responseDelayMinutes: 5,\n          timezone: 'UTC',\n          workingHours: ['9:00-17:00'],\n          defaultLlmProvider: 'openai',\n          confidenceThreshold: 0.7,\n        };\n      });\n  },\n\n  // Update user preferences\n  updateUserPreferences: (preferences: UserPreferences): Promise<UserPreferences> => {\n    return api.put(`/users/${DEMO_USER_ID}/preferences`, preferences)\n      .then(response => response.data);\n  },\n};\n\nexport default api;
